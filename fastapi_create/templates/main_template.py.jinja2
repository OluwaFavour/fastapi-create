from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
{% if cors_enabled %}from fastapi.middleware.cors import CORSMiddleware{% endif %}
{% if auth_system == "session" %}
from starlette.middleware.sessions import SessionMiddleware{% endif %}

from app.core.config import get_settings
from app.db.init_db import init_db, dispose_db{% if auth_enabled %}
from app.routes.auth import router as auth_router{% endif %}


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Asynchronous context manager for managing the lifespan of the FastAPI application.

    Parameters:
    - app (FastAPI): The FastAPI application.

    Yields:
    None

    Usage:
    ```
    async with lifespan(app):
        # Code to be executed within the lifespan of the application
    ```
    """
    {% if is_async %}await {% endif %}init_db()
    yield
    {% if is_async %}await {% endif %}dispose_db()

app = FastAPI(
    debug=get_settings().debug,
    lifespan=lifespan,
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    openapi_url="/api/openapi.json",
    root_path="/api/v1",
)

# ADD MIDDLEWARES
{% if auth_system == "session" %}## ADD SESSION MIDDLEWARE
app.add_middleware(
    SessionMiddleware,
    secret_key=get_settings().secret_key,
    same_site=get_settings().session_same_site,
    https_only=get_settings().session_secure,
    max_age=get_settings().session_expiry * 24 * 60 * 60,
){% endif %}

## ADD CORS MIDDLEWARE
{% if cors_enabled %}app.add_middleware(
    CORSMiddleware,
    allow_origins=get_settings().cors_allowed_origins,
    allow_credentials=get_settings().cors_allow_credentials,
    allow_methods=get_settings().cors_allowed_methods,
    allow_headers=["*"],
){% endif %}


# ADD ROUTERS{% if auth_enabled %}
app.include_router(auth_router){% endif %}



@app.get("/", include_in_schema=False)
@app.head("/", include_in_schema=False)
async def read_root(request: Request):
    base_url = request.base_url._url.rstrip("/")
    return {
        "message": "I'm alive!",
        "docs": {
            "redoc": f"{base_url}/api/redoc",
            "swagger": f"{base_url}/api/docs",
            "openapi": f"{base_url}/api/openapi.json",
        },
    }